// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Organisation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  streetAddress String?
  suburb        String?
  state         String?
  postcode      String?
  users         User[]
  // billing       Billing  @relation(fields: [billingId], references: [id])
  // billingId     String
  // Notice        Notice[]

  // @@index([billingId])
}

model BuildingComplex {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  type             String
  totalOccupancies Int
  streetAddress    String
  suburb           String
  state            String
  postcode         String
  // notice           Notice[]
  // User             User?    @relation(fields: [userId], references: [id])
  // userId           String?

  // @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  firstName      String?       @db.Text
  lastName       String?       @db.Text
  email          String        @unique
  emailVerified  DateTime?
  accounts       Account[]
  sessions       Session[]
  notices        Notice[]
  // buildingComplexes BuildingComplex[]
  // organisation      Organisation?     @relation(fields: [organisationId], references: [id])
  // organisationId    String?
  // @@index([organisationId])
  Organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?

  @@index([email])
  @@index([organisationId])
}

model Notice {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.Text
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  fileName  String?   @db.Text
  fileSize  Int?
  fileType  String?
  uploadUrl String    @db.Text
  key       String?   @db.Text
  status    String?
  startDate DateTime?
  endDate   DateTime?
  // organisation      Organisation     @relation(fields: [organisationId], references: [id])
  // organisationId    String
  // BuildingComplex   BuildingComplex? @relation(fields: [buildingComplexId], references: [id])
  // buildingComplexId String?
  // @@index([organisationId])
  // @@index([buildingComplexId])

  @@index([authorId])
}

model Billing {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  firstName     String
  lastName      String
  phone         String
  email         String
  streetAddress String
  suburb        String
  state         String
  postcode      String
  // organisations Organisation[]
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
