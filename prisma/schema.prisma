// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Notice {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  // documentUrl String?
  // active      Boolean    @default(false)
  // activatedAt DateTime
  // archived    Boolean    @default(true)
  // archivedAt  DateTime   @default(now())
  // community   String
  // Community   Community? @relation(fields: [communityId], references: [id])
  // communityId String?

  @@index([authorId])
}

// model Community {
//   id        String            @id @default(cuid())
//   createdAt DateTime          @default(now())
//   updatedAt DateTime          @updatedAt
//   name      String
//   image     String?
//   notices   Notice[]
//   accounts  Account?          @relation(fields: [accountId], references: [id])
//   accountId String?
// }

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Community         Community[]

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notices       Notice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
